hora_londres
# hora do objeto hora_sao_paulo
hora_sao_paulo
hora_londres - hora_sao_paulo
## Vamos atribuir ao objeto hora_londres um horário registrado considerando o fuso horário de Londres
hora_londres <- "2019-07-03 18:30"
## Vamos atribuir o fuso horário ao objeto. Pois o R ainda não sabia qual o fuso horário do objeto hora_londres.
hora_londres <- as.POSIXct(hora_londres, tz="Europe/London")
## Criando um novo objeto com o mesmo valor
hora_sao_paulo<-hora_londres
## Transformando o fuso horário do objeto hora_sao_paulo
attributes(hora_sao_paulo)$tzone <- "America/Sao_Paulo"
# hora do objeto hora_londres
hora_londres
# hora do objeto hora_sao_paulo
hora_sao_paulo
hora_londres - hora_sao_paulo
data_hora
date2_R
data_hora
hora_sao_paulo
hora_sao_paulo - data_hora
format(hora_sao_paulo - data_hora,"%d %H %M")
hora_sao_paulo - data_hora
format(hora_sao_paulo - data_hora,"%d %H %M")
format(hora_sao_paulo - data_hora,"%d %H %M %S")
format(hora_sao_paulo - data_hora,"%d")
as.Date(hora_sao_paulo - data_hora,"%d %H %M %S")
class(hora_sao_paulo - data_hora)
difference <- difftime(hora_sao_paulo, data_hora, units='hours')
difference
data_hora
hora_sao_paulo - data_hora
data_hora
data_hora + 60
data_hora + 60*60
data_hora
date
date2_R
date - date2_R
strptime("2019-01-12", "%Y %m %d")
strptime("2019/01/12", "%Y %m %d")
strptime("2019-01-12")
as.Date("2019-01-12", "%Y %m %d")
as.Date("2019-01-12", format="%Y %m %d")
Sys.time()
as.Date(Sys.time(), format="%Y %m %d")
as.Date("2020-05-25", format="%Y %m %d")
as.Date("2020-05-25 19:22:12 -03", format="%Y %m %d")
date_inicio<-strptime("10 Dezembro 2017", format="%d %B %Y")
data_inicio<-strptime("10 Dezembro 2017", format="%d %B %Y")
data_fim<-strptime("17 Dezembro 2018", format="%d %B %Y")
data_fim - data_inicio
data_inicio + 10
data_inicio + strptime("10","%H")
strptime("10","%H")
strptime("10","%H")
60*60*24
nosso_vetor<-c()
for(posicao in 1:10){
nosso_vetor[posicao]<-2*posicao
}
nosso_vetor
for(auxiliar in 1:10){
print(nosso_vetor[auxiliar])
}
print(nosso_vetor[1])
print(nosso_vetor[2])
print(nosso_vetor[3])
print(nosso_vetor[4])
print(nosso_vetor[5])
print(nosso_vetor[6])
print(nosso_vetor[7])
print(nosso_vetor[8])
print(nosso_vetor[9])
print(nosso_vetor[10])
i<-0
while(i < 1){
i<-rnorm
print(i)
}
i<-rnorm(1)
print(i)
i<-0
while(i < 1){
i<-rnorm(1)
print(i)
}
i<-0
while(i < 1){
i<-rnorm(1) #a função rnorm(1) irá gerar 1 número aleatório com a distribuição normal padrão.
print(i)    #a função print(i) irá imprimir o valor atribuído a i na linha anterior.
}
a<-2
b<-5
if(a < b){
print("Condição verdadeira. 'a' é menor que 'b'")
}
if(a > b){ #a condição lógica foi invertida e será FALSA
print("Condição verdadeira. 'a' é maior que 'b'")
}else{
print("Condição falsa. 'a' não é maior que 'b'")
}
## if
if(condicao_logica){ #a condição lógica deve ser sempre TRUE ou FALSE
#SCRIPT CASO A CONDIÇÃO FOR ATENTIDA
}
```{r,echo=F}
?ifelse
vetor<-c(2,10,5,8,9,6,3,0,25)
vetor2 <- ifelse(vetor<10,"menor","maior")
vetor2
vetor<-c(2,10,5,8,9,6,3,0,25)
vetor2 <- ifelse(vetor<10,"menor","MAIOR")
vetor2
vetor<-c(2,10,5,50,9,15,3,0,25)
vetor2 <- ifelse(vetor<10,"menor","MAIOR")
vetor2
if(vetor<10){
vetor2<-"menor"
}else{
vetor2<-"MAIOR"
}
vetor2
head(mtcars)
head(mtcars)
mtcars$consumo_combustivel<-ifelse(mtcars$mpg<20,"Bebe muito","Bebe pouco")
head(mtcarts)
head(mtcars)
?str
data("USArrests")
data("USArrests")
force(USArrests)
View(USArrests)
data()
AirPassengers
ChickWeight
HairEyeColor
JohnsonJohnson
Orange
Titanic
ToothGrowth
UCBAdmissions
airquality
PlantGrowth
Seatbelts
faithful
npk
occupationalStatus
quakes
airquality
Seatbelts
airquality
Seatbelts
airquality
Seatbelts
?Seatbelts
111+809+394
Loblolly
AirPassengers
LifeCycleSavings
?LifeCycleSavings
library(datasets)
?datasets
library(help = "datasets")
AirPassengers
uspop
warpbreaks
women
longley
morley
iris
iris
names(iris)
?iris
iris<-iris
?str
str(iris)
?table
table(iris$Species)
iris %>%
count(Species)
library(dplyr)
iris %>%
count(Species)
count
## As primeiras linhas do seu conjunto de dados
head(iris)
# As últimas linhas do seu conjunto de dados
tail(iris)
names(iris)
summary
?summary
summary(iris)
hist(iris$Sepal.Length)
boxplot(iris$Petal.Width)
boxplot(iris$Petal.Width)
?leaflet
library(ggplot2)
ggplot(mpg, aes(displ, hwy, colour = class))
ggplot(mpg)
?aes
ggplot(mpg, aes(displ, hwy)) +
geom_point()
str(mpg)
str(mtcars)
ggplot(mtcars, aes(mpg, cyl, colour = wt)) +
geom_point()
ggplot(mtcars, aes(mpg, wt, colour = qsec)) +
geom_point()
ggplot(mtcars, aes(mpg, wt, colour = qsec)) +
geom_point()
ggplot(mtcars, aes(mpg, qsec)) +
geom_point()
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
?mtcars
?geom_point
ggplot(mtcars, aes(mpg, wt))
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
ggplot(mtcars, aes(mpg, wt)) +
geom_point()
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(color=factor(cyl)))
geom_point(aes(color=factor(cyl)))
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(color=factor(cyl)))
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(color=factor(cyl)))
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(color=cyl))
geom_point(aes(color=cyl))
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(color=cyl))
mtcars
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(color=factor(cyl)))
ggplot(mtcars, aes(mpg, wt)) +
geom_point(aes(color=factor(cyl)))
ggplot(mtcars, aes(mpg, wt,color=factor(cyl))) +
geom_point()
?mtcars
class(mtcars$cyl)
library(ggplot2)
ggplot(mtcars, aes(mpg, wt,color=factor(cyl))) +
geom_point()
ggplot(mtcars, aes(mpg, wt,color=factor(cyl))) +
geom_point()
mtcars
corr <- round(cor(mtcars), 1) #a função round é usada para arredondar as casas decimais do resultado.
corr
melted_corr <- melt(corr)
# install.packages("reshape2")  #caso vc não já tenha instalado a biblioteca reshape2, precisa executar essa linha.
library(reshape2)
melted_corr <- melt(corr)
melted_corr
?melt
corr <- round(cor(mtcars), 1) #a função round é usada para arredondar as casas decimais do resultado.
corr
View(melted_corr)
library(ggplot2)
ggplot(data = melted_corr, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
upper.tri(corr)
triangulo_superior <- upper.tri(corr,diag = F)
library(reshape2)
melted_corr <- melt(triangulo_superior, na.rm = TRUE)
melted_corr
melted_corr <- melt(triangulo_superior, na.rm = TRUE)
library(ggplot2)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_corr, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
melted_corr
melted_corr
triangulo_superior <- upper.tri(corr,diag = F)
triangulo_superior
corr
corr
triangulo_superior <- upper.tri(corr,diag = F)
triangulo_superior
triangulo_superior <- corr[upper.tri(corr,diag = F)]
triangulo_superior
upper.tri(corr,diag = F)
corr
corr[lower.tri(corr)]<- NA
corr
corr[lower.tri(corr,diag = F)]<- NA
corr
corr[lower.tri(corr,diag = T)]<- NA
corr
corr
melted_corr <- melt(corr, na.rm = TRUE)
library(ggplot2)
ggplot(data = melted_corr, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_corr, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Coef. Correlação") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo X", y = "nome eixo y")
dados_correlacao <- melt(corr, na.rm = TRUE)
library(ggplot2)
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Coef. Correlação") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo X", y = "nome eixo y")
dados_correlacao <- melt(corr) #transformando os dados para as 3 colunas como anteriormente.
?geom_tile
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Coef. Correlação") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Coef. Correlação") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Coef. Correlação") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
dados_correlacao <- melt(corr,na.rm = T) #transformando os dados para as 3 colunas como anteriormente.
dados_correlacao
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Coef. Correlação") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "black")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Coef. Correlação") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+    #definindo a cor do contorno de cada quadrado.
scale_fill_gradient2(low = "blue", high = "red", mid = "white", #definindo a escala de cor das correlações
midpoint = 0, limit = c(-1,1), space = "Lab", #definindo a escala das correlações
name="Coef. Correlação") + #definindo o nome da legenda.
theme_minimal()+
# theme(axis.text.x = element_text(angle = 45, vjust = 1,
#    size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+    #definindo a cor do contorno de cada quadrado.
scale_fill_gradient2(low = "blue", high = "red", mid = "white", #definindo a escala de cor das correlações
midpoint = 0, limit = c(-1,1), space = "Lab", #definindo a escala das correlações
name="Coef. Correlação") + #definindo o nome da legenda.
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+    #definindo a cor do contorno de cada quadrado.
scale_fill_gradient2(low = "blue", high = "red", mid = "white", #definindo a escala de cor das correlações
midpoint = 0, limit = c(-1,1), space = "Lab", #definindo a escala das correlações
name="Coef. Correlação") + #definindo o nome da legenda.
theme_minimal()+
# theme(axis.text.x = element_text(angle = 45, vjust = 1,
#    size = 12, hjust = 1))+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+    #definindo a cor do contorno de cada quadrado.
scale_fill_gradient2(low = "blue", high = "red", mid = "white", #definindo a escala de cor das correlações
midpoint = 0, limit = c(-1,1), space = "Lab", #definindo a escala das correlações
name="Coef. Correlação") + #definindo o nome da legenda.
# theme_minimal()+
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+    #definindo a cor do contorno de cada quadrado.
scale_fill_gradient2(low = "blue", high = "red", mid = "white", #definindo a escala de cor das correlações
midpoint = 0, limit = c(-1,1), space = "Lab", #definindo a escala das correlações
name="Coef. Correlação") + #definindo o nome da legenda.
theme_minimal()+ #tema de fundo do gráfico
# coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+    #definindo a cor do contorno de cada quadrado.
scale_fill_gradient2(low = "blue", high = "red", mid = "white", #definindo a escala de cor das correlações
midpoint = 0, limit = c(-1,1), space = "Lab", #definindo a escala das correlações
name="Coef. Correlação") + #definindo o nome da legenda.
theme_minimal()+ #tema de fundo do gráfico
coord_fixed() +
labs(x = "nome eixo x", y = "nome eixo y")
ggplot(data = dados_correlacao, aes(Var2, Var1, fill = value))+ #seleciona os dados e as variáveis para cada eixo, assim como a variável que determina a cor (value).
geom_tile(color = "white")+    #definindo a cor do contorno de cada quadrado.
scale_fill_gradient2(low = "blue", high = "red", mid = "white", #definindo a escala de cor das correlações
midpoint = 0, limit = c(-1,1), space = "Lab", #definindo a escala das correlações
name="Coef. Correlação") + #definindo o nome da legenda.
theme_minimal()+ #tema de fundo do gráfico
coord_fixed() + #mantém as coordenadas e as mediadas dos quadrados fixos.
labs(x = "nome eixo x", y = "nome eixo y") #define o nome para o eixo x e para o eixo y
b <- ggplot(mtcars, aes(x = wt, y = mpg))
.labs <- rownames(mtcars)
b + geom_point(aes(color = cyl)) +
geom_text_repel(aes(label = .labs,  color = cyl), size = 3)+
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07"))
ggplot(df, aes(mpg, wt))+
geom_point(aes(color = cyl, size = cyl), alpha = 0.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_size(range = c(0.5, 12))  # Adjust the range of points size
ggplot(mtcars, aes(mpg, wt))+
geom_point(aes(color = cyl, size = cyl), alpha = 0.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_size(range = c(0.5, 12))  # Adjust the range of points size
ggplot(mtcars, aes(mpg, wt))+
geom_point(aes(color = factor(cyl), size = cyl), alpha = 0.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_size(range = c(0.5, 12))  # Adjust the range of points size
ggplot(mtcars, aes(mpg, wt))+
geom_point(aes(color = factor(cyl), size = factor(cyl)), alpha = 0.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_size(range = c(0.5, 12))  # Adjust the range of points size
str(mtcarts)
str(mtcars)
ggplot(mtcars, aes(mpg, wt))+
geom_point(aes(color = cyl, size = qsec), alpha = 0.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_size(range = c(0.5, 12))  # Adjust the range of points size
ggplot(mtcars, aes(mpg, wt))+
geom_point(aes(color = factor(cyl), size = qsec), alpha = 0.5) +
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) +
scale_size(range = c(0.5, 12))  # Adjust the range of points size
ggplot(mtcars, aes(mpg, wt))+ #definição de qual é o dataset e quais são as variáveis dos eixos x e y.
geom_point(aes(color = factor(cyl), size = qsec), alpha = 0.5) + #definição de qual variável será representada pela cor e qual será representada pelo tamanho das bolhas.
scale_color_manual(values = c("#00AFBB", "#E7B800", "#FC4E07")) + #definição das cores das bolhas.
scale_size(range = c(0.5, 12))  # Amplitude do tamanho das bolhas
# install.packages("reshape2")  #caso vc não já tenha instalado a biblioteca reshape2, precisa executar essa linha.
library(reshape2)
HTML
shiny::HTML()
cor
cor(mtcars)
mtcars
stats::cor(mtcars)
?mtcars
corr <- round(stats::cor(datasets::mtcars), 1) #a função round é usada para arredondar as casas decimais do resultado.
corr
